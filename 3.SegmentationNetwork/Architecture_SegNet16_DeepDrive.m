BNNpath='C:\Project_NeuralNet\BinarizedNeuralNetwork2018b';
addpath(genpath(BNNpath))

% addpath(genpath(pwd))
% load('C:\Project_NeuralNet\BinarizedNeuralNetwork2018b\TrainedNetwork\CIFAR10_16Layer\OriginNet.mat');
load('C:\Project_NeuralNet\BinarizedNeuralNetwork2018b\4.TrainedNetwork\CIFAR10_12Lyaer\MaxPool\OriginNet.mat');

% [cmap,classes] = DeepDriveColorMap();
[cmap,classes] = DeepDriveColorMap_Compress();

imageSize = [360,480,3]; %[240,352,3]; [360,480,3]; [480,640,3];

% labelIDs = DeepDrivePixelLabelIDs();
labelIDs = DeepDrivePixelLabelIDs_Compress();

% lgraph=BinarizedSegnetArchitectureMaker(ForSegNet2,imageSize);

imageFolder='E:\Datasets\DeepDrive\bdd100k\seg\images\train';
resizedimageFolder = fullfile(imageFolder,'imagesResized',filesep);

labelFolder='E:\Datasets\DeepDrive\bdd100k\seg\color_labels\train';
resizedlabelFolder = fullfile(labelFolder,'labelsResized',filesep);

% lgraph=BinarizedSegnetArchitectureMaker_test2(ForSegNet,imageSize,classes);
lgraph=BinarizedSegnetArchitectureMaker_test2(CIFAR10_12layer,imageSize,classes);

% gTruth = groundTruth(labelFolder);
pxds = pixelLabelDatastore(labelFolder,classes,labelIDs);
pxds = resizeCamVidPixelLabels(pxds,resizedlabelFolder,imageSize);
% pxdstmp = imageDatastore(labelFolder);
% pxds = pixelLabelImageDatastore(labelFolder);
imds = imageDatastore(imageFolder);
imds = resizeCamVidImages(imds,resizedimageFolder,imageSize);

tbl = countEachLabel(pxds);
frequency = tbl.PixelCount/sum(tbl.PixelCount);
imageFreq = tbl.PixelCount ./ tbl.ImagePixelCount;
classWeights = median(imageFreq) ./ imageFreq;
pxLayer = pixelClassificationLayer('Name','labels','ClassNames',tbl.Name,'ClassWeights',classWeights);
lgraph = removeLayers(lgraph,'labels');
lgraph = addLayers(lgraph, pxLayer);
lgraph = connectLayers(lgraph,'softmax','labels');

imageFolder_val='E:\Datasets\DeepDrive\bdd100k\seg\images\val';
labelFolder_val='E:\Datasets\DeepDrive\bdd100k\seg\color_labels\val';
resizedimageFolder_val = fullfile(imageFolder_val,'imagesResized',filesep);
resizedlabelFolder_val = fullfile(labelFolder_val,'labelsResized',filesep);

pxds_val = pixelLabelDatastore(labelFolder_val,classes,labelIDs);
pxds_val = resizeCamVidPixelLabels(pxds_val,resizedlabelFolder_val,imageSize);

imds_val=imageDatastore(imageFolder_val);
imds_val = resizeCamVidImages(imds_val,resizedimageFolder_val,imageSize);

% augmenter = imageDataAugmenter('RandXReflection',true,...
%     'RandXTranslation',[-10 10],'RandYTranslation',[-10 10]);

% pximds = pixelLabelImageDatastore(imds,pxds,...
%     'DataAugmentation',augmenter, ...
%     'OutputSize' ,imageSize);

pximds = pixelLabelImageDatastore(imds,pxds);

pximds_val= pixelLabelImageDatastore(imds_val,pxds_val);

learnRate=1e-7;
miniBatchSize=6;
valFrequency = floor(size(imds.Files,1)/miniBatchSize);
MaxEpochs=20;
% options = trainingOptions('adam', ...
%     'InitialLearnRate',learnRate,...
%     'L2Regularization',0.0005, ...
%     'MaxEpochs',MaxEpochs, ...
%     'LearnRateSchedule','piecewise',...
%     'LearnRateDropFactor',0.1,...
%     'LearnRateDropPeriod',floor(MaxEpochs*0.9),...
%     'MiniBatchSize',miniBatchSize, ...
%     'Shuffle','every-epoch', ...
%     'Plots','training-progress',...
%     'Verbose',true, ...   % For txtal progress checking
%     'VerboseFrequency',10,...
%     'ValidationData',pximds_val,...
%     'ValidationFrequency',valFrequency,...
%     'ValidationPatience',Inf,...
%     'ExecutionEnvironment','gpu');

% options = trainingOptions('adam', ...
%     'InitialLearnRate',learnRate,...
%     'MaxEpochs',MaxEpochs, ...
%     'LearnRateSchedule','piecewise',...
%     'LearnRateDropFactor',0.1,...
%     'LearnRateDropPeriod',25,...
%     'MiniBatchSize',miniBatchSize, ...
%     'Shuffle','every-epoch', ...
%     'Plots','training-progress',...
%     'Verbose',true, ...   % For txtal progress checking
%     'VerboseFrequency',valFrequency,...
%     'ValidationData',pximds_val,...
%     'ValidationFrequency',valFrequency,...
%     'ValidationPatience',Inf,...
%     'ExecutionEnvironment','multi-gpu');

options = trainingOptions('adam', ...
    'InitialLearnRate',learnRate,...
    'MaxEpochs',MaxEpochs, ...
    'LearnRateSchedule','piecewise',...
    'LearnRateDropFactor',0.1,...
    'LearnRateDropPeriod',17,...
    'MiniBatchSize',miniBatchSize, ...
    'Shuffle','every-epoch', ...
    'Plots','training-progress',...
    'Verbose',true, ...   % For txtal progress checking
    'VerboseFrequency',valFrequency,...
    'ExecutionEnvironment','multi-gpu');

% options = trainingOptions('adam', ...
%     'InitialLearnRate',learnRate,...
%     'MaxEpochs',MaxEpochs, ...
%     'LearnRateSchedule','piecewise',...
%     'LearnRateDropFactor',0.1,...
%     'LearnRateDropPeriod',25,...
%     'MiniBatchSize',miniBatchSize, ...
%     'Shuffle','every-epoch', ...
%     'Plots','training-progress',...
%     'Verbose',true, ...   % For txtal progress checking
%     'VerboseFrequency',valFrequency,...
%     'ValidationData',pximds_val,...
%     'ValidationFrequency',valFrequency,...
%     'ValidationPatience',120,...
%     'ExecutionEnvironment','multi-gpu');

% options = trainingOptions('adam', ...
%     'InitialLearnRate',learnRate,...
%     'L2Regularization',0.0005, ...
%     'MaxEpochs',MaxEpochs, ...
%     'LearnRateSchedule','piecewise',...
%     'LearnRateDropFactor',0.1,...
%     'LearnRateDropPeriod',20,...
%     'MiniBatchSize',miniBatchSize, ...
%     'Shuffle','every-epoch', ...
%     'Plots','training-progress',...
%     'Verbose',true, ...   % For txtal progress checking
%     'VerboseFrequency',valFrequency,...
%         'ValidationData',pximds_val,...
%     'ValidationFrequency',valFrequency,...
%     'ValidationPatience',Inf,...
%     'ExecutionEnvironment','multi-gpu');
%     'Plots','training-progress',...
BinSegNet_tmp = trainNetwork(pximds,lgraph,options);

lgraph = createLgraphUsingConnections(BinSegNet_tmp.Layers,BinSegNet_tmp.Connections);

options = trainingOptions('adam', ...
    'InitialLearnRate',learnRate*0.1,...
    'MaxEpochs',12, ...
    'LearnRateSchedule','piecewise',...
    'LearnRateDropFactor',0.1,...
    'LearnRateDropPeriod',3,...
    'MiniBatchSize',miniBatchSize, ...
    'Shuffle','every-epoch', ...
    'Plots','training-progress',...
    'Verbose',true, ...   % For txtal progress checking
    'VerboseFrequency',valFrequency,...
    'ExecutionEnvironment','multi-gpu');

BinSegNet = trainNetwork(pximds,lgraph,options);

I = read(imds_val);
I=imresize(I,imageSize(1:2));
C = semanticseg(I, BinSegNet);

B = labeloverlay(I,C,'Colormap',cmap,'Transparency',0.3);
imshow(B)
pixelLabelColorbar(cmap, classes);

expectedResult = read(pxds_val);
actual = uint8(C);
expected = uint8(expectedResult);
imshowpair(actual, expected)

iou = jaccard(C, expectedResult);
table(classes,iou)

pxdsResults = semanticseg(imds_val,BinSegNet,'WriteLocation',tempdir,'Verbose',false,'MiniBatchSize',miniBatchSize);

metrics = evaluateSemanticSegmentation(pxdsResults,pxds_val,'Verbose',false);

metrics.DataSetMetrics

metrics.ClassMetrics